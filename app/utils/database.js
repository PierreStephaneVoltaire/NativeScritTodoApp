"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sqlite = require("nativescript-sqlite");
const note_component_1 = require("./note-component");
class noteDatabase {
    constructor() {
        this.db_promise = new Sqlite("MyTasks.db", function (err, db) {
            if (err) {
                //if it fails, give up
                console.error("create", err);
                this.DB = null;
            }
            else {
                console.log("DB created");
            }
        });
    }
    createTable() {
        this.db_promise.then(function (db) {
            if (db.isOpen()) {
                db.execSQL("CREATE TABLE IF NOT EXISTS task (title TEXT,description TEXT)", function (err, success) {
                    console.log("table created:", success);
                });
            }
        }, function (err) {
            console.error("We failed to open database", err);
        });
    }
    insertNote(tempNote) {
        this.db_promise.then(function (db) {
            if (Sqlite.exists("MyTasks.db")) {
                db.execSQL("insert into task (title,description) values (?,?)", [tempNote.getTitle(), tempNote.getDescrition()], function (err, id) {
                    console.log("The new record id is:", id);
                });
            }
        }, function (err) {
            console.error("We failed to open database", err);
        });
    }
    pushAllNotes(items) {
        this.db_promise.then(function (db) {
            return db.each('select * from task', function (err, row) {
                console.log("Row results it:", row); // Prints ["Row x Field_1", "Row x Field 2"...] for each row passed to it
                let temp = new note_component_1.note(row[0], row[1]);
                console.log(row[0] + "   " + row[1]);
                items.push(temp);
            }, function (err, count) {
                console.log("Rows displayed:", count); // Prints 100  (Assuming their are a 100 rows found)
            });
        }, function (err) {
            console.error("We failed to open database", err);
        });
    }
}
exports.noteDatabase = noteDatabase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzVDLHFEQUF3QztBQUN4QztJQUVJO1FBR0EsZUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sc0JBQXNCO2dCQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFDbkIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDOUIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBVEgsQ0FBQztJQVlELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFFN0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsT0FBTyxDQUFDLCtEQUErRCxFQUFFLFVBQVUsR0FBRyxFQUFFLE9BQU87b0JBQzlGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzNDLENBQUMsQ0FDQSxDQUFDO1lBQ04sQ0FBQztRQUNMLENBQUMsRUFBRSxVQUFVLEdBQUc7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBR1AsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFjO1FBRXJCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUM3QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtREFBbUQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO29CQUM5SCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7UUFDTCxDQUFDLEVBQUUsVUFBVSxHQUFHO1lBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJRCxZQUFZLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUM3QixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFDL0IsVUFBVSxHQUFHLEVBQUUsR0FBRztnQkFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMseUVBQXlFO2dCQUM5RyxJQUFJLElBQUksR0FBRyxJQUFJLHFCQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsQ0FBQyxFQUNELFVBQVUsR0FBRyxFQUFFLEtBQUs7Z0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxvREFBb0Q7WUFDL0YsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLEVBQUUsVUFBVSxHQUFHO1lBRVosT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFSjtBQWxFRCxvQ0FrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XG5pbXBvcnQgeyBub3RlIH0gZnJvbSAnLi9ub3RlLWNvbXBvbmVudCc7XG5leHBvcnQgY2xhc3Mgbm90ZURhdGFiYXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuICAgIGRiX3Byb21pc2UgPSBuZXcgU3FsaXRlKFwiTXlUYXNrcy5kYlwiLCBmdW5jdGlvbiAoZXJyLCBkYikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAvL2lmIGl0IGZhaWxzLCBnaXZlIHVwXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiY3JlYXRlXCIsIGVycik7XG4gICAgICAgICAgICB0aGlzLkRCID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiREIgY3JlYXRlZFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICBjcmVhdGVUYWJsZSgpIHtcbiAgICAgICAgdGhpcy5kYl9wcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG5cbiAgICAgICAgICAgIGlmIChkYi5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGRiLmV4ZWNTUUwoXCJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB0YXNrICh0aXRsZSBURVhULGRlc2NyaXB0aW9uIFRFWFQpXCIsIGZ1bmN0aW9uIChlcnIsIHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0YWJsZSBjcmVhdGVkOlwiLCBzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIldlIGZhaWxlZCB0byBvcGVuIGRhdGFiYXNlXCIsIGVycik7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9XG5cbiAgICBpbnNlcnROb3RlKHRlbXBOb3RlOiBub3RlKSB7XG5cbiAgICAgICAgdGhpcy5kYl9wcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgICAgICBpZiAoU3FsaXRlLmV4aXN0cyhcIk15VGFza3MuZGJcIikpIHtcbiAgICAgICAgICAgICAgICBkYi5leGVjU1FMKFwiaW5zZXJ0IGludG8gdGFzayAodGl0bGUsZGVzY3JpcHRpb24pIHZhbHVlcyAoPyw/KVwiLCBbdGVtcE5vdGUuZ2V0VGl0bGUoKSwgdGVtcE5vdGUuZ2V0RGVzY3JpdGlvbigpXSwgZnVuY3Rpb24gKGVyciwgaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGUgbmV3IHJlY29yZCBpZCBpczpcIiwgaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiV2UgZmFpbGVkIHRvIG9wZW4gZGF0YWJhc2VcIiwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHB1c2hBbGxOb3RlcyhpdGVtcyk6dm9pZCB7XG4gICAgICAgIHRoaXMuZGJfcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgcmV0dXJuIGRiLmVhY2goJ3NlbGVjdCAqIGZyb20gdGFzaycsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgcm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUm93IHJlc3VsdHMgaXQ6XCIsIHJvdyk7IC8vIFByaW50cyBbXCJSb3cgeCBGaWVsZF8xXCIsIFwiUm93IHggRmllbGQgMlwiLi4uXSBmb3IgZWFjaCByb3cgcGFzc2VkIHRvIGl0XG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbmV3IG5vdGUocm93WzBdLHJvd1sxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJvd1swXStcIiAgIFwiK3Jvd1sxXSlcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh0ZW1wKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnIsIGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUm93cyBkaXNwbGF5ZWQ6XCIsIGNvdW50KTsgLy8gUHJpbnRzIDEwMCAgKEFzc3VtaW5nIHRoZWlyIGFyZSBhIDEwMCByb3dzIGZvdW5kKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXZSBmYWlsZWQgdG8gb3BlbiBkYXRhYmFzZVwiLCBlcnIpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxufSJdfQ==