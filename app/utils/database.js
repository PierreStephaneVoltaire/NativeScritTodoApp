"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sqlite = require("nativescript-sqlite");
const note_component_1 = require("./note-component");
class noteDatabase {
    constructor() {
        this.db_promise = new Sqlite("MyTasks.db", function (err, db) {
            if (err) {
                //if it fails, give up
                console.error("create", err);
                this.DB = null;
            }
            else {
                console.log("DB created");
            }
        });
    }
    createTable() {
        this.db_promise.then(function (db) {
            if (db.isOpen()) {
                db.execSQL("CREATE TABLE IF NOT EXISTS task (title TEXT,description TEXT)", function (err, success) {
                    console.log("table created:", success);
                });
            }
        }, function (err) {
            console.error("We failed to open database", err);
        });
    }
    insertNote(tempNote) {
        this.db_promise.then(function (db) {
            if (Sqlite.exists("MyTasks.db")) {
                db.execSQL("insert into task (title,description) values (?,?)", [tempNote.getTitle(), tempNote.getDescrition()], function (err, id) {
                    console.log("The new record id is:", id);
                });
            }
        }, function (err) {
            console.error("We failed to open database", err);
        });
    }
    pushAllNotes(items) {
        this.db_promise.then(function (db) {
            return db.each('select * from task', function (err, row) {
                console.log("Row results it:", row); // Prints ["Row x Field_1", "Row x Field 2"...] for each row passed to it
                let temp = new note_component_1.note(row[0], row[1]);
                console.log(row[0] + "   " + row[1]);
                items.push(temp);
            }, function (err, count) {
                console.log("Rows displayed:", count); // Prints 100  (Assuming their are a 100 rows found)
            });
        }, function (err) {
            console.error("We failed to open database", err);
        });
    }
}
exports.noteDatabase = noteDatabase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzVDLHFEQUF3QztBQUN4QztJQUVJO1FBR0EsZUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sc0JBQXNCO2dCQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFDbkIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDOUIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBVEgsQ0FBQztJQVlELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFFN0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsT0FBTyxDQUFDLCtEQUErRCxFQUFFLFVBQVUsR0FBRyxFQUFFLE9BQU87b0JBQzlGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzNDLENBQUMsQ0FDQSxDQUFDO1lBQ04sQ0FBQztRQUNMLENBQUMsRUFBRSxVQUFVLEdBQUc7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBR1AsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFjO1FBRXJCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUM3QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtREFBbUQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO29CQUM5SCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7UUFDTCxDQUFDLEVBQUUsVUFBVSxHQUFHO1lBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJRCxZQUFZLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUM3QixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFDL0IsVUFBVSxHQUFHLEVBQUUsR0FBRztnQkFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMseUVBQXlFO2dCQUM5RyxJQUFJLElBQUksR0FBRyxJQUFJLHFCQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsQ0FBQyxFQUNELFVBQVUsR0FBRyxFQUFFLEtBQUs7Z0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxvREFBb0Q7WUFDL0YsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLEVBQUUsVUFBVSxHQUFHO1lBRVosT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFSjtBQWxFRCxvQ0FrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcbmltcG9ydCB7IG5vdGUgfSBmcm9tICcuL25vdGUtY29tcG9uZW50JztcclxuZXhwb3J0IGNsYXNzIG5vdGVEYXRhYmFzZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgfVxyXG4gICAgZGJfcHJvbWlzZSA9IG5ldyBTcWxpdGUoXCJNeVRhc2tzLmRiXCIsIGZ1bmN0aW9uIChlcnIsIGRiKSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAvL2lmIGl0IGZhaWxzLCBnaXZlIHVwXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJjcmVhdGVcIiwgZXJyKTtcclxuICAgICAgICAgICAgdGhpcy5EQiA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJEQiBjcmVhdGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBjcmVhdGVUYWJsZSgpIHtcclxuICAgICAgICB0aGlzLmRiX3Byb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYi5pc09wZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgZGIuZXhlY1NRTChcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHRhc2sgKHRpdGxlIFRFWFQsZGVzY3JpcHRpb24gVEVYVClcIiwgZnVuY3Rpb24gKGVyciwgc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGFibGUgY3JlYXRlZDpcIiwgc3VjY2Vzcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiV2UgZmFpbGVkIHRvIG9wZW4gZGF0YWJhc2VcIiwgZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGluc2VydE5vdGUodGVtcE5vdGU6IG5vdGUpIHtcclxuXHJcbiAgICAgICAgdGhpcy5kYl9wcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRiKSB7XHJcbiAgICAgICAgICAgIGlmIChTcWxpdGUuZXhpc3RzKFwiTXlUYXNrcy5kYlwiKSkge1xyXG4gICAgICAgICAgICAgICAgZGIuZXhlY1NRTChcImluc2VydCBpbnRvIHRhc2sgKHRpdGxlLGRlc2NyaXB0aW9uKSB2YWx1ZXMgKD8sPylcIiwgW3RlbXBOb3RlLmdldFRpdGxlKCksIHRlbXBOb3RlLmdldERlc2NyaXRpb24oKV0sIGZ1bmN0aW9uIChlcnIsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGUgbmV3IHJlY29yZCBpZCBpczpcIiwgaWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXZSBmYWlsZWQgdG8gb3BlbiBkYXRhYmFzZVwiLCBlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgcHVzaEFsbE5vdGVzKGl0ZW1zKTp2b2lkIHtcclxuICAgICAgICB0aGlzLmRiX3Byb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRiLmVhY2goJ3NlbGVjdCAqIGZyb20gdGFzaycsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyLCByb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJvdyByZXN1bHRzIGl0OlwiLCByb3cpOyAvLyBQcmludHMgW1wiUm93IHggRmllbGRfMVwiLCBcIlJvdyB4IEZpZWxkIDJcIi4uLl0gZm9yIGVhY2ggcm93IHBhc3NlZCB0byBpdFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbmV3IG5vdGUocm93WzBdLHJvd1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocm93WzBdK1wiICAgXCIrcm93WzFdKVxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godGVtcCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJvd3MgZGlzcGxheWVkOlwiLCBjb3VudCk7IC8vIFByaW50cyAxMDAgIChBc3N1bWluZyB0aGVpciBhcmUgYSAxMDAgcm93cyBmb3VuZClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXZSBmYWlsZWQgdG8gb3BlbiBkYXRhYmFzZVwiLCBlcnIpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0iXX0=